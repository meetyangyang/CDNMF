This paper was motivated by the problem of thescheduling of a no-wait production line, where a job must be processedwithout any interruption either on or between machines due to characteristics of the processing technology itself or the absence of storagecapacity between operations of a job. Many production processes areno-wait constrained, such as metallurgical processes, chemical processesand food processes. However, the scheduling problems arising from manyproduction environments, including no-wait job-shops, are NP-hard andextremely difficult to solve. Detailed researches have been conducted onthe traditional job shop problem in past decades, but little attention hasbeen paid to the problem considered in this paper. The current availablealgorithms usually decomposed the problem into two subproblems: thetimetabling problem and the sequencing problem. These algorithmsmainly focused on designing complicated search method (such as variableneighborhood search, hybrid simulated annealing/genetic algorithm, complete local search with memory) for the sequencing problem, meanwhileemployed some simple timetabling for the timetabling problem. In fact,the effectiveness of the no-wait job shop also depends on the timetablingmethods. Through the comprehensive investigation of the no-wait constraint and job shop characteristics, we proposed a time difference-basedproblem description which guarantees the feasibility of a timetable byexploring the time difference between the jobs instead of the operations.Based on the time difference description, a delicate shift penalty-basedtimetabling method was proposed and integrated into a complete localsearch with memory. We demonstrated the effectiveness and efficiencyof the proposed algorithm through extensive computational experiments.Our future researches can be pursued along two directions. First, it seemsto be necessary to further investigate the shift penalty strategy to improvethe performance of the timetabling method. Second, other local searchmethods can be considered to improve the performance of the algorithm.
