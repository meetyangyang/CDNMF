Every computer user has encountered situations where an unresponsive program enters into a state of suspended animation for perpetuity. A scheduling policy that can guarantee livelock-freedom is highly desirable in this, and other instances of concurrent systems. The results of this paper show that if the concurrent system is modeled as a Petri net that belongs to the class identified in this paper, then it is possible to determine if there is a policy that avoids livelocks, which paves the way for algorithm-development for livelock-avoidance.
