The development of an automated system within an industrial setting is a complex task;  whose successful result depends on the joint efforts of a team of designers with different scientific backgrounds and specialized knowledge. In fact;  an automated system is typically composed of a mechanical assembly;  which must be precisely designed and manufactured;  and a set of sensors and actuators (e.g.;  electrical drives;  pneumatic systems;  etc.);  which are;  on their turn;  controlled most of the time by means of digital processors. Of course;  both electrical parts and control algorithms (e.g.;  proportional;  integral;  and derivative (PID) regulators;  logic and supervisory control;  reference trajectories for mechanical motions;  etc.) should be designed with the same care given to mechanical aspects. Moreover;  it is undeniable that none of the various parts composing the automated system design specification can;  on their own;  allow engineers to understand the actual behavior of the whole system;  especially without a common description language that is understandable for all of the designers. The present paper introduces a unified language which aims to support integrated design specifications of automated systems;  including the dynamics of heterogeneous physical assemblies;  the discrete-event behavior of distributed control software;  and the specification of interface ports between the plant and the control system. With the proposed language;  it is possible to obtain a complete picture of the automated system suitable for its simulation;  documentation;  and validation. The modeling language described in the paper supports the principles of object orientation. This choice moves in the direction of enhancing modularity and reusability properties of design specifications;  which are aspects of great importance in the design practice. Moreover;  the object-oriented approach to automated systems design proposed in the paper aims to introduce the concept of \design by extension\ in the manufacturing industry. This means that the definition of specialization relationships between classes of components implies that those components should be designed in order to be substitutable with each other;  especially from a dynamic point of view. This aspect will be the subject of further papers illustrating other practical insights on the use of object-oriented models for automated systems. 
