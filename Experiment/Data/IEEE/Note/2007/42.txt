Current software technology for finitary control design of discrete-event systems (DESs) requires control requirements to be specified in event-based finite (-trace) automata[2], [3]. This paper is motivated by the fact that specification in automata can be a nontrivial problem, since a system designer may not always know for sure if a specification automaton captures the intended control requirement correctly and completely, nor can another designer readily interpret the intended control meaning of the automaton. As propositional linear-time temporal logic (PTL)is syntactically closer to natural language, it suggests specifying a class of control requirements as state-based PTL formulae to render them more readable and easily understood, and proposes a correct and complete algorithm to convert these formulae into event-based finite automata. NanTA, a practical implementation of the algorithm, has been developed as an interface to enable writing control requirements in PTL that it translates into finite automata for direct use with TCT [3], a freely available, finite automata based control design software for DESs. The interface would help reduce design errors and costs associated with incorrect, unnecessarily restrictive, or misinterpreted specifications. In future research, to support larger control systems design found in many real-world manufacturing and automation systems (e.g., [4]), we will attempt to make NanTA computationally more efficient, and generate more compact specification automata.
